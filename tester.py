# import secrets
#
# LOG_TABLE = [
#     0x00, 0xff, 0xc8, 0x08, 0x91, 0x10, 0xd0, 0x36,
#     0x5a, 0x3e, 0xd8, 0x43, 0x99, 0x77, 0xfe, 0x18,
#     0x23, 0x20, 0x07, 0x70, 0xa1, 0x6c, 0x0c, 0x7f,
#     0x62, 0x8b, 0x40, 0x46, 0xc7, 0x4b, 0xe0, 0x0e,
#     0xeb, 0x16, 0xe8, 0xad, 0xcf, 0xcd, 0x39, 0x53,
#     0x6a, 0x27, 0x35, 0x93, 0xd4, 0x4e, 0x48, 0xc3,
#     0x2b, 0x79, 0x54, 0x28, 0x09, 0x78, 0x0f, 0x21,
#     0x90, 0x87, 0x14, 0x2a, 0xa9, 0x9c, 0xd6, 0x74,
#     0xb4, 0x7c, 0xde, 0xed, 0xb1, 0x86, 0x76, 0xa4,
#     0x98, 0xe2, 0x96, 0x8f, 0x02, 0x32, 0x1c, 0xc1,
#     0x33, 0xee, 0xef, 0x81, 0xfd, 0x30, 0x5c, 0x13,
#     0x9d, 0x29, 0x17, 0xc4, 0x11, 0x44, 0x8c, 0x80,
#     0xf3, 0x73, 0x42, 0x1e, 0x1d, 0xb5, 0xf0, 0x12,
#     0xd1, 0x5b, 0x41, 0xa2, 0xd7, 0x2c, 0xe9, 0xd5,
#     0x59, 0xcb, 0x50, 0xa8, 0xdc, 0xfc, 0xf2, 0x56,
#     0x72, 0xa6, 0x65, 0x2f, 0x9f, 0x9b, 0x3d, 0xba,
#     0x7d, 0xc2, 0x45, 0x82, 0xa7, 0x57, 0xb6, 0xa3,
#     0x7a, 0x75, 0x4f, 0xae, 0x3f, 0x37, 0x6d, 0x47,
#     0x61, 0xbe, 0xab, 0xd3, 0x5f, 0xb0, 0x58, 0xaf,
#     0xca, 0x5e, 0xfa, 0x85, 0xe4, 0x4d, 0x8a, 0x05,
#     0xfb, 0x60, 0xb7, 0x7b, 0xb8, 0x26, 0x4a, 0x67,
#     0xc6, 0x1a, 0xf8, 0x69, 0x25, 0xb3, 0xdb, 0xbd,
#     0x66, 0xdd, 0xf1, 0xd2, 0xdf, 0x03, 0x8d, 0x34,
#     0xd9, 0x92, 0x0d, 0x63, 0x55, 0xaa, 0x49, 0xec,
#     0xbc, 0x95, 0x3c, 0x84, 0x0b, 0xf5, 0xe6, 0xe7,
#     0xe5, 0xac, 0x7e, 0x6e, 0xb9, 0xf9, 0xda, 0x8e,
#     0x9a, 0xc9, 0x24, 0xe1, 0x0a, 0x15, 0x6b, 0x3a,
#     0xa0, 0x51, 0xf4, 0xea, 0xb2, 0x97, 0x9e, 0x5d,
#     0x22, 0x88, 0x94, 0xce, 0x19, 0x01, 0x71, 0x4c,
#     0xa5, 0xe3, 0xc5, 0x31, 0xbb, 0xcc, 0x1f, 0x2d,
#     0x3b, 0x52, 0x6f, 0xf6, 0x2e, 0x89, 0xf7, 0xc0,
#     0x68, 0x1b, 0x64, 0x04, 0x06, 0xbf, 0x83, 0x38,
# ]
#
# EXP_TABLE = [
#     0x01, 0xe5, 0x4c, 0xb5, 0xfb, 0x9f, 0xfc, 0x12,
#     0x03, 0x34, 0xd4, 0xc4, 0x16, 0xba, 0x1f, 0x36,
#     0x05, 0x5c, 0x67, 0x57, 0x3a, 0xd5, 0x21, 0x5a,
#     0x0f, 0xe4, 0xa9, 0xf9, 0x4e, 0x64, 0x63, 0xee,
#     0x11, 0x37, 0xe0, 0x10, 0xd2, 0xac, 0xa5, 0x29,
#     0x33, 0x59, 0x3b, 0x30, 0x6d, 0xef, 0xf4, 0x7b,
#     0x55, 0xeb, 0x4d, 0x50, 0xb7, 0x2a, 0x07, 0x8d,
#     0xff, 0x26, 0xd7, 0xf0, 0xc2, 0x7e, 0x09, 0x8c,
#     0x1a, 0x6a, 0x62, 0x0b, 0x5d, 0x82, 0x1b, 0x8f,
#     0x2e, 0xbe, 0xa6, 0x1d, 0xe7, 0x9d, 0x2d, 0x8a,
#     0x72, 0xd9, 0xf1, 0x27, 0x32, 0xbc, 0x77, 0x85,
#     0x96, 0x70, 0x08, 0x69, 0x56, 0xdf, 0x99, 0x94,
#     0xa1, 0x90, 0x18, 0xbb, 0xfa, 0x7a, 0xb0, 0xa7,
#     0xf8, 0xab, 0x28, 0xd6, 0x15, 0x8e, 0xcb, 0xf2,
#     0x13, 0xe6, 0x78, 0x61, 0x3f, 0x89, 0x46, 0x0d,
#     0x35, 0x31, 0x88, 0xa3, 0x41, 0x80, 0xca, 0x17,
#     0x5f, 0x53, 0x83, 0xfe, 0xc3, 0x9b, 0x45, 0x39,
#     0xe1, 0xf5, 0x9e, 0x19, 0x5e, 0xb6, 0xcf, 0x4b,
#     0x38, 0x04, 0xb9, 0x2b, 0xe2, 0xc1, 0x4a, 0xdd,
#     0x48, 0x0c, 0xd0, 0x7d, 0x3d, 0x58, 0xde, 0x7c,
#     0xd8, 0x14, 0x6b, 0x87, 0x47, 0xe8, 0x79, 0x84,
#     0x73, 0x3c, 0xbd, 0x92, 0xc9, 0x23, 0x8b, 0x97,
#     0x95, 0x44, 0xdc, 0xad, 0x40, 0x65, 0x86, 0xa2,
#     0xa4, 0xcc, 0x7f, 0xec, 0xc0, 0xaf, 0x91, 0xfd,
#     0xf7, 0x4f, 0x81, 0x2f, 0x5b, 0xea, 0xa8, 0x1c,
#     0x02, 0xd1, 0x98, 0x71, 0xed, 0x25, 0xe3, 0x24,
#     0x06, 0x68, 0xb3, 0x93, 0x2c, 0x6f, 0x3e, 0x6c,
#     0x0a, 0xb8, 0xce, 0xae, 0x74, 0xb1, 0x42, 0xb4,
#     0x1e, 0xd3, 0x49, 0xe9, 0x9c, 0xc8, 0xc6, 0xc7,
#     0x22, 0x6e, 0xdb, 0x20, 0xbf, 0x43, 0x51, 0x52,
#     0x66, 0xb2, 0x76, 0x60, 0xda, 0xc5, 0xf3, 0xf6,
#     0xaa, 0xcd, 0x9a, 0xa0, 0x75, 0x54, 0x0e, 0x01,
# ]
#
#
# def add(a, b):
#     return a ^ b
#
#
# def mul(a, b):
#     """
#     Multiplies two numbers in the finite field GF(256)
#     """
#     log_a = LOG_TABLE[a]
#     log_b = LOG_TABLE[b]
#     sum = (int(log_a) + int(log_b)) % 255
#     ret = int(EXP_TABLE[sum])
#     return int(ret)
#
#
# def div(a, b):
#     """
#     Divides two numbers in the finite field GF(256)
#     """
#     if b == 0:
#         raise Exception("Divide by zero")
#     log_a = LOG_TABLE[a]
#     log_b = LOG_TABLE[b]
#     diff = ((int(log_a) - int(log_b)) + 255) % 255
#     ret = int(EXP_TABLE[diff])
#     return int(ret)
#
#
#
# class Polynomial:
#     def __init__(self, degree):
#         self.coefficients = bytearray(degree + 1)
#
#     def evaluate(self, x):
#         # origin case
#         if x ==0 :
#             return self.coefficients[0]
#
#         # compute the polynomial value using Horner's method
#         degree = len(self.coefficients) - 1
#         out = self.coefficients[degree]
#         for i in range(degree - 1, -1, -1):
#             coeff = self.coefficients[i]
#             out = add(mul(out,x),coeff)
#         return out
#
#
# def make_polynomial(intercept, degree):
#     """
#     Creates a random polynomial with the given intercept and degree
#     :param intercept:
#     :param degree:
#     :return:
#     """
#     polynomial_instance = Polynomial(degree)
#
#     # Set the intercept
#     polynomial_instance.coefficients[0] = intercept
#
#     # assign random co-efficients to the polynomial
#     polynomial_instance.coefficients[1:] = secrets.token_bytes(degree)
#
#     return polynomial_instance
#
#
#
# def split(secret: bytes, parts: int, threshold: int) -> list[bytearray]:
#     """
#     Takes a secret and splits it into parts
#     :param secret:
#     :param parts:
#     :param threshold:
#     :return:
#     """
#     # Sanity check the input
#     if parts < threshold:
#         raise Exception("Parts must be greater than threshold")
#     if parts > 255:
#         raise Exception("Parts must be less than 256")
#     if threshold < 2:
#         raise Exception("Threshold must be greater than 1")
#     if threshold > 255:
#         raise Exception("Threshold must be less than 256")
#     if len(secret) < 1:
#         raise Exception("Secret must be at least 1 byte long")
#
#     # Generate random list of x coordinates
#     x_coordinates = [secrets.randbelow(255) for _ in range(1, 256)]
#
#     # Allocate the output array , initalize the final byte of the output with the offset.
#     # This is used to ensure that the same secret can be split into different parts
#     output = [bytearray() for _ in range(parts)]
#     for i in range(len(output)):
#         output[i] = bytearray(len(secret) + 1)
#         output[i][len(secret)] = int(x_coordinates[i]) + 1
#
#     for i, val in enumerate(secret):
#         polynomial_instance = make_polynomial(val, int(threshold - 1))
#
#         for j in range(parts):
#             x = int(x_coordinates[j]) + 1
#             y = polynomial_instance.evaluate(x)
#             output[j][i] = y
#
#     return output
#
#
# def interpolate_polynomial(x_samples: bytearray, y_samples: bytearray, x: int):
#     """
#     Takes N sample points and returns the value of the polynomial at x using Lagrange interpolation
#     """
#     limit = len(x_samples)
#     result = 0
#     for i in range(limit):
#         basis = 1
#         for j in range(limit):
#             if i != j:
#                 num = add(x, x_samples[j])
#                 den = add(x_samples[i], x_samples[j])
#                 term = div(num, den)
#                 basis = mul(basis, term)
#         group = mul(y_samples[i], basis)
#         result = add(result, group)
#     return result
#
#
# def combine(parts: list[bytearray]) -> bytearray:
#     """
#     Takes a list of parts and returns the secret
#     :param parts:
#     :return:
#     """
#     # Verify enough parts are present
#     if len(parts) < 2:
#         raise Exception("Not enough parts to combine")
#
#     # Verify all parts are all the same length
#     first_part_len = len(parts[0])
#
#     if first_part_len < 2:
#         raise Exception("Part is too short")
#
#     for part in parts:
#         if len(part) != first_part_len:
#             raise Exception("Parts are not the same length")
#
#     # Create a buffer to store the reconstructed secret
#     secret = bytearray(first_part_len - 1)
#
#     # Buffer to store the samples
#     x_samples = bytearray(len(parts))
#     y_samples = bytearray(len(parts))
#
#     # set the x value for each sample and ensure the no_sample values are the same , otherwise div() can be unhappy
#     check_map = {}
#
#     for i, part in enumerate(parts):
#         samp = part[first_part_len - 1]
#         if samp in check_map:
#             raise Exception("Duplicate sample")
#         check_map[samp] = True
#         x_samples[i] = samp
#
#     # Reconstruct each  byte
#     for idx, _ in enumerate(secret):
#         for i, part in enumerate(parts):
#             y_samples[i] = part[idx]
#
#         # interpolate the polynomial and compute the vault at 0
#         val = interpolate_polynomial(x_samples, y_samples, 0)
#
#         # Evaluate the 0th value to get the intercept
#         secret[idx] = val
#
#     return secret
#
# if "__main__" == __name__:
#     secret = b"Hello World"
#     parts = 5
#     threshold = 3
#     print(secret)
#     shares = split(secret, parts, threshold)
#     for i,share in enumerate(shares):
#         print(f"Share {i+1} : {share}")
#
#     print("Combining shares")
#     secret = combine(shares[:threshold])
#     print(secret)

if "__main__" == __name__:
    from pyshamir import split, combine

    secret = b"Hello World"
    parts = 5
    threshold = 3
    print(secret)
    shares = split(secret, parts, threshold)
    for i,share in enumerate(shares):
        print(f"Share {i+1} : {share}")
    # combine shares
    secret = combine(shares[:threshold])
    print(secret)